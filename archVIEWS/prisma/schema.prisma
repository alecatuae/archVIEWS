generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      String   @default("USER")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    Int?
  team      Team?    @relation(fields: [teamId], references: [id])
  logs      Log[]
  adrs      ADR[]
  adrHistories ADRHistory[]
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  components  Component[]
}

model Component {
  id           String   @id
  name         String
  description  String?
  category     String
  neo4jNodeId  String   @unique
  teamId       Int?
  team         Team?    @relation(fields: [teamId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  complianceId Int?
  compliance   Compliance? @relation(fields: [complianceId], references: [id])
  logs         Log[]
  adrs         ADR[]
  roadmapItems RoadmapItem[]
}

model Compliance {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  level       String
  components  Component[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Log {
  id          Int       @id @default(autoincrement())
  action      String
  description String?
  entity      String
  entityId    String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  componentId String?
  component   Component? @relation(fields: [componentId], references: [id])
  createdAt   DateTime  @default(now())
}

model Report {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  query       String
  format      String    @default("JSON")
  schedule    String?
  lastRun     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Configuration {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadmapItem {
  id          Int       @id @default(autoincrement())
  componentId String
  component   Component @relation(fields: [componentId], references: [id])
  environment String    // prod, stage, dev
  type        String    // rollout, eol, eos, deprecation
  startDate   DateTime
  endDate     DateTime?
  description String?
  status      String    // planned, in-progress, completed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ADR {
  id          Int         @id @default(autoincrement())
  title       String
  status      String      // proposed, accepted, rejected, deprecated, superseded
  context     String      @db.Text
  decision    String      @db.Text
  consequences String      @db.Text
  componentId String?
  component   Component?  @relation(fields: [componentId], references: [id])
  version     Int         @default(1)
  authorId    Int
  author      User        @relation(fields: [authorId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ADRHistory  ADRHistory[]
}

model ADRHistory {
  id         Int      @id @default(autoincrement())
  adrId      Int
  adr        ADR      @relation(fields: [adrId], references: [id])
  version    Int
  title      String
  status     String
  context    String    @db.Text
  decision   String    @db.Text
  consequences String   @db.Text
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
} 